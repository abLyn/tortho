datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String    @unique
  password      String
  role          Role      @default(Assistant)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  Admin
  Doctor
  Assistant
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//------------------------------------------------------------------------------

// Define the Patient model for patient information.
model Patient {
  id             String         @id @default(cuid()) @map("_id")
  firstname      String
  lastname       String
  dob            DateTime
  gender         Gender
  phone          String
  email          String?
  address        String?
  medicalHistory String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  clinicalCases  ClinicalCase[]
  appointments   Appointment[]
}

enum Gender {
  Male
  Female
}

// Define the ClinicalCase model
model ClinicalCase {
  id            String             @id @default(cuid()) @map("_id")
  title         String
  cost          Int                @default(0)
  isPayed       Boolean            @default(false)
  diagnostic    String[]
  status        ClinicalCaseStatus @default(OPEN)
  TreatmentPlan TreatmentPlan[]
  appointments  Appointment[]
  payments      Payment[]
  patientId     String
  patient       Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  parentId      String?
  parent        ClinicalCase?      @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCases      ClinicalCase[]     @relation("ParentChildren")
}

enum ClinicalCaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Payment {
  id             String       @id @default(cuid()) @map("_id")
  value          Int          @default(0)
  clinicalCaseId String
  createdAt      DateTime     @default(now())
  clinicalCase   ClinicalCase @relation(fields: [clinicalCaseId], references: [id], onDelete: Cascade)
}

// Define the Appointment model
model Appointment {
  id             String        @id @default(cuid()) @map("_id")
  title          String
  start          DateTime
  end            DateTime
  allDay         Boolean       @default(false)
  createdAt      DateTime      @default(now())
  patientId      String?
  patient        Patient?      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  clinicalCaseId String?
  clinicalCase   ClinicalCase? @relation(fields: [clinicalCaseId], references: [id])
}

// Define the TreatmentPlan model
model TreatmentPlan {
  id              String       @id @default(cuid()) @map("_id")
  planDescription String
  clinicalCaseId  String
  clinicalCase    ClinicalCase @relation(fields: [clinicalCaseId], references: [id])
}
