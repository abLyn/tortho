datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String    @unique
  password      String
  role          Role      @default(DOCTOR)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  ADMIN
  DOCTOR
  ASSISTANT
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//-----------------------------------------------------------------------------

// Define your data models in a Prisma schema file (e.g., schema.prisma).

// Define the Patient model for patient information.
model Patient {
  id String @id @default(cuid()) @map("_id")

  firstname String
  lastname  String
  dob       String
  gender    Gender  @default(Male)
  phone     String
  email     String?
  address   String  @default("Algerie")

  medicalHistory      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  RadiographicImage   RadiographicImage[]
  Photograph          Photograph[]
  DentalModel         DentalModel[]
  OrthodonticAnalysis OrthodonticAnalysis[]
  TreatmentPlan       TreatmentPlan[]
  PatientConsultation PatientConsultation[]
  InformedConsent     InformedConsent[]
  TreatmentInitiation TreatmentInitiation[]
}

enum Gender {
  Male
  Female
}

// Define the RadiographicImage model for radiographic images.
model RadiographicImage {
  id        String  @id @default(cuid()) @map("_id")
  type      String
  // Add fields for storing the actual image data (e.g., imageFile Binary)
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

// Define the Photograph model for intraoral and extraoral photographs.
model Photograph {
  id        String  @id @default(cuid()) @map("_id")
  type      String
  // Add fields for storing the actual image data (e.g., imageFile Binary)
  imageFile String?
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

// Define the DentalModel model for dental models.
model DentalModel {
  id        String  @id @default(cuid()) @map("_id")
  // Add fields to store information about the dental models
  imageFile String?
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

// Define the OrthodonticAnalysis model for analyzing patient information.
model OrthodonticAnalysis {
  id               String  @id @default(cuid()) @map("_id")
  malocclusion     String
  crowding         Boolean
  spacing          Boolean
  overbites        Boolean
  skeletalRelation String
  patient          Patient @relation(fields: [patientId], references: [id])
  patientId        String
}

// Define the TreatmentPlan model for treatment planning.
model TreatmentPlan {
  id              String  @id @default(cuid()) @map("_id")
  planDescription String
  // Add fields for specifying braces, aligners, or other appliances
  patient         Patient @relation(fields: [patientId], references: [id])
  patientId       String
}

// Define the PatientConsultation model for patient consultations.
model PatientConsultation {
  id               String   @id @default(cuid()) @map("_id")
  consultationDate DateTime
  treatmentOptions String
  patient          Patient  @relation(fields: [patientId], references: [id])
  patientId        String
}

// Define the InformedConsent model for obtaining patient consent.
model InformedConsent {
  id           String   @id @default(cuid()) @map("_id")
  consentDate  DateTime
  risks        String
  benefits     String
  alternatives String
  patient      Patient  @relation(fields: [patientId], references: [id])
  patientId    String
}

// Define the TreatmentInitiation model for starting treatment.
model TreatmentInitiation {
  id             String   @id @default(cuid()) @map("_id")
  initiationDate DateTime
  // Add fields for tracking treatment progress and adjustments
  patient        Patient  @relation(fields: [patientId], references: [id])
  patientId      String
}
